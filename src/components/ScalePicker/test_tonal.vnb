{cells:[{kind:2,language:'typescriptreact',value:'import { Chord, Key, Scale, ScaleType } from \'tonal\';\n\n// const allScaleTypes = ScaleType.all();\nconst chord = Chord.get("Cmaj7")\nconst notes = Chord.notes("maj7", "C4")\nconst detectedChord = Chord.detect(notes)\nconst keyChords = Key.majorKey("C")\nconst tokens = Chord.tokenize("Cmaj7")\nconsole.log("chord")\nconsole.log(chord)\nconsole.log("notes")\nconsole.log(notes)\nconsole.log("detectedChord")\nconsole.log(detectedChord)\nconsole.log("keyChords")\nconsole.log(keyChords)\nconsole.log("tokens")\nconsole.log(tokens)',metadata:{id:'AsSw6Fg44VfT0HR8x74vX',paused:false}},{kind:2,language:'typescriptreact',value:'// we\'ll want to pick a key, and then use \nimport {Key} from \'tonal\'\n\nconst chosen_key_note = "C"\nconst chosen_key = Key.majorKey(chosen_key_note)\n\n// triads \nconst normal_chords = chosen_key.triads\nconsole.log("normal_chords")\nconsole.log(normal_chords)\n',metadata:{id:'yZ7xQBnqS0rUK3oapk2gL'}},{kind:1,language:'markdown',value:'Chord options:\n- normal triads\n- 7th chords (Maj7, 7 etc)\n- Suspended chords (for C would be Csus2, Csus4, Gsus4)\n- 9th chords\n- 11th chords\n- 13th chords \n- altered dominant chords \n- Augmented Chords\n- Diminished 7th chords \n',metadata:{id:'1R4uo55wZz0bDnc5hVftr'}},{kind:2,language:'typescriptreact',value:'import {ScaleChords} from \'tonal\'\n\nconst scaleChords = Scale.scaleChords("d major")\nconsole.log(scaleChords)\n',metadata:{id:'6EdYxaZO80dllsZychJ9j'}},{kind:2,language:'typescriptreact',value:"import {ChordType} from 'tonal'\n\nconst all = ChordType.all()\nconsole.log(all)\n",metadata:{id:'nPlMIJgZ28atx3d_7SKN4'}},{kind:2,language:'typescriptreact',value:'import {Chord, Scale} from \'tonal\'\n\nconst scale = Scale.get("d major").notes; // ["D", "E", "F#", "G", "A", "B", "C#"]\nconst chords = Scale.scaleChords("d major");\n\nscale.forEach(note => {\n    chords.forEach(chord => {\n        const tones = Chord.getChord(chord, note).notes; // Get chord tones starting on D\n        const fits = tones.every(note => scale.includes(note)); // Check if all tones fit\n        console.log(`${note} ${chord}: ${tones.join(", ")} - Fits scale: ${fits}`);\n    });\n})',metadata:{id:'59gIOD6eBH3Au1kGf25Wx'}},{kind:2,language:'typescriptreact',value:"import { Scale, Chord, ChordType } from 'tonal';\n\n// Get the notes in the D major scale\nconst scale = Scale.get(\"D major\").notes; // ['D', 'E', 'F#', 'G', 'A', 'B', 'C#']\n\n// Function to check if a chord fits within the scale\nconst isChordInScale = (chordNotes, scaleNotes) => {\n  return chordNotes.every(note => scaleNotes.includes(note)); // All chord notes must be in scale\n};\n\n// Get all available chord types dynamically\nconst chordTypes = ChordType.all().map(ct => ct.aliases[0]); // Use first alias for names\n\n// Find valid chords for each note in the scale\nconst chordsByNote = scale.map(note => {\n  const validChords = chordTypes\n    .map(type => {\n      const chord = Chord.getChord(type, note); // Build chord for each type\n      if (chord.empty) return null; // Skip invalid chords\n      const isValid = isChordInScale(chord.notes, scale); // Check if all notes fit in scale\n      return isValid ? `${note}${type}` : null; // Return chord name if valid\n    })\n    .filter(Boolean); // Remove nulls\n\n  return { note, chords: validChords };\n});\n\nconsole.log(JSON.stringify(chordsByNote, null, 2));",metadata:{id:'yOHG8CQi4HAtfBnns2o97'}},{kind:2,language:'typescriptreact',value:'import {getEveryChordInScale} from \'../../utils/scaleChords\'\n\nconst chords = getEveryChordInScale("d major")\nconsole.log(chords)',metadata:{id:'9L2wM_bOUQxaHJbpLDSXK'}},{kind:2,language:'typescriptreact',value:'import {getEveryChordInScale} from \'../../utils/scaleChords\'\n\nconst chords = getEveryChordInScale("C major", ["maj", "min", "7", "maj7", "min7", "dim"])\nconsole.log(chords)',metadata:{id:'Q3TqF7J1ma7o3aI2a7Fzw'}}]}